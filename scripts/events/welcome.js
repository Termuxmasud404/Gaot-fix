const { getTime } = global.utils;
const moment = require("moment-timezone");
const fs = require("fs");
const path = require("path");
const axios = require("axios");
const chalk = require("chalk");

// temp data holder
if (!global.temp.welcomeEvent) global.temp.welcomeEvent = {};

module.exports = {
  config: {
    name: "welcome",
    version: "2.0",
    author: "Aminulsordar",
    category: "events"
  },

  langs: {
    en: {
      session1: "morning",
      session2: "noon",
      session3: "afternoon",
      session4: "evening",
      welcomeMessage:
        "‚ï≠‚îÅ‚îÄ‚îÅ‚îÄ‚â™ùêñùêÑùêãùêÇùêéùêåùêÑ‚â´‚îÄ‚îÅ‚îÄ‚îÅ‚ùØ‚ùØ\n‚îÇ\n‚îú‚îÄ‚ùØ„Äê‚Ä¢ùêÅùêéùêì-ùêéùêñùêçùêÑùêë: ùóîùó∫ùó∂ùóªùòÇùóπ ùó¶ùóºùóøùó±ùóÆùóø„Äë\n‚îÇ\n‚îú‚îÄ‚ùØ„ÄêùêÄùêåùêàùêçùêîùêã-ùêó-ùêÅùêéùêì„Äë\n‚îÇ\n‚îú‚îÄ‚ùØ„Äê‚Ä¢ùêÅùêéùêì-ùêèùêëùêÑùêÖùêàùêó:„Äê#„Äë„Äë\n‚îÇ\n‚îú‚îÄ‚ùØ „Äê‚Ä¢ùêìùêòùêèùêÑ:  #help ùêîùêíùêÑ ùêÇùêåùêÉ‚Ä¢„Äë\n‚îÇ\n‚îú‚îÄ‚ùØ„Äê‚Ä¢ùêéùêñùêçùêÑùêë+ùêÄùêÉùêåùêàùêç„Äë\n\n‚îú‚îÄ‚ùØhttps://www.facebook.com/br4nd.abir.your.next.bf.jan\n‚îÇ\n‚îú‚îÄ‚ùØm.me/100071880593545\n‚îÇ\n‚ï∞‚îÅ‚îÄ‚îÅ‚îÄ‚â™ùêÄùêåùêàùêçùêîùêã-ùêó-ùêÅùêéùêì‚â´‚îÄ‚îÅ‚îÄ‚îÅ‚ùØ‚ùØ",
      multiple1: "you",
      multiple2: "you guys",
      defaultWelcomeMessage:
        '‚ïî‚ïê‚ïê‚ïê‚ïê‚Ä¢|      üíõ      |‚Ä¢‚ïê‚ïê‚ïê‚ïê‚ïó\n ‚ù§Ô∏è‡¶Ü‡ßç‡¶Å‡¶∏‡ßç‡¶Å‡¶∏‡¶æ‡ßç‡¶Å‡¶≤‡¶æ‡ßç‡¶Å‡¶Æ‡ßÅ‡ßç‡¶Åüíö‡¶Ü‡ßç‡¶Å‡¶≤‡¶æ‡ßç‡¶Å‡¶á‡ßç‡¶Å‡¶ï‡ßÅ‡ßç‡¶Å‡¶Æ‡ßç‡¶Å‚ù§Ô∏è\n‚ïö‚ïê‚ïê‚ïê‚ïê‚Ä¢|      üíõ      |‚Ä¢‚ïê‚ïê‚ïê‚ïê‚ïù\n\n‚îÅ‚ùØüÖÜüÑ¥üÑªüÑ≤üÑæüÑºüÑ¥‚û§\n\n‚îÅ‚ùØüÖΩüÖ¥üÜÜ‚û§\n\n‚îÅ‚ùØüá≤‚Äåüá™‚Äåüá≤‚Äåüáß‚Äåüá™‚Äåüá∑‚Äå‚û§\n\n‚îÅ‚ùØ{userName}‚û§\n\n‡ºÑ‚ú∫‡¶Ü‡ßç‡¶Å‡¶™‡ßç‡¶Å‡¶®‡¶æ‡ßç‡¶Å‡¶ï‡ßá‡ßç‡¶Å ‡¶Ü‡ßç‡¶Å‡¶Æ‡¶æ‡ßç‡¶Å‡¶¶‡ßá‡ßç‡¶Å‡¶∞‡ßç‡¶Å‚ú∫‡øê\n\n{boxName}\n\n üå∫üåøüå∏‚Äî‡¶è‡ßç‡¶Å‡¶∞‡ßç‡¶Å ‡¶™‡ßç‡¶Å‡¶ï‡ßç‡¶∑‡ßç‡¶ÅüçÄ‡¶•‡ßá‡ßç‡¶Å‡¶ï‡ßá‡ßç‡¶ÅüçÄ‚Äîüå∏üåø\n\n üåø_‡¶≠‡¶æ‡ßç‡¶Å‡¶≤‡ßã‡ßç‡¶Å‡¶¨‡¶æ‡ßç‡¶Å‡¶∏‡¶æ‡ßç‡¶Å_‡¶Ö‡ßç‡¶Å‡¶≠‡¶ø‡ßç‡¶Å‡¶∞‡¶æ‡ßç‡¶Å‡¶Æ‡ßç‡¶Å_üåø\n\n‡ºÑ‚ú∫‡¶Ü‡¶Å‡¶™‡¶Å‡¶®‡¶ø‡¶Å ‡¶è‡¶Å‡¶á‡¶Å ‡¶ó‡ßç‡¶∞‡ßÅ‡¶Å‡¶™‡ßá‡¶Å‡¶∞ {position} ‡¶Æ‡ßá‡ßç‡¶Å‡¶Æ‡ßç‡¶¨‡¶æ‡ßç‡¶Å‡¶∞‡¶Å ‡øê\n\nTotal members: {membersCount}.\n\nTotal admins: {adminsCount}\n\n‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Æ‡ßü ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶ì ‡¶™‡¶æ‡¶∂‡ßá ‡¶•‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶∞‡¶á‡¶≤‡ßã !!-üçÇüå∫ü•Ä\n\nü¶ã‚ïë·Éöüíû üíû ·Éö‚ïëü¶ã\n\nüíê‚òòÔ∏è-‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‡¶™‡ßç‡¶∞‡¶ø‡ßü-‚òòÔ∏èüíê\n‚ù§Ô∏èùêÅùêéùêì-ùêéùêñùêçùêÑùêë: ùóîùó∫ùó∂ùóªùòÇùóπ ùó¶ùóºùóøùó±ùóÆùóø‚ù§Ô∏è\n\nCurrent date and time: {dateTime}'
    }
  },

  onStart: async ({ threadsData, message, event, api, getLang, usersData }) => {
    if (event.logMessageType !== "log:subscribe") return;

    const { threadID } = event;
    const { nickNameBot } = global.GoatBot.config;
    const prefix = global.utils.getPrefix(threadID);
    const dataAddedParticipants = event.logMessageData.addedParticipants;

    // If bot itself added
    if (dataAddedParticipants.some((item) => item.userFbId === api.getCurrentUserID())) {
      if (nickNameBot) {
        api.changeNickname(nickNameBot, threadID, api.getCurrentUserID());
      }
      return message.send(getLang("welcomeMessage", prefix));
    }

    // Init temp data
    if (!global.temp.welcomeEvent[threadID]) {
      global.temp.welcomeEvent[threadID] = {
        joinTimeout: null,
        dataAddedParticipants: []
      };
    }

    global.temp.welcomeEvent[threadID].dataAddedParticipants.push(...dataAddedParticipants);
    clearTimeout(global.temp.welcomeEvent[threadID].joinTimeout);

    global.temp.welcomeEvent[threadID].joinTimeout = setTimeout(async () => {
      const threadData = await threadsData.get(threadID);
      if (threadData?.settings?.sendWelcomeMessage === false) return;

      const dataAddedParticipants = global.temp.welcomeEvent[threadID].dataAddedParticipants;
      const dataBanned = threadData.data?.banned_ban || [];
      const threadName = threadData.threadName || "this group";
      const threadInfo = await api.getThreadInfo(threadID);

      const validParticipants = dataAddedParticipants.filter(
        (user) => !dataBanned.some((ban) => ban.id === user.userFbId)
      );
      if (validParticipants.length === 0) return;

      // Ensure cache folder
      const cacheFolder = path.resolve(__dirname, "cache");
      if (!fs.existsSync(cacheFolder)) fs.mkdirSync(cacheFolder);

      const background = "https://cdn.popcat.xyz/welcome-bg.png";

      // Session name
      const getSessionName = () => {
        const hours = getTime("HH");
        return hours <= 10
          ? getLang("session1")
          : hours <= 12
          ? getLang("session2")
          : hours <= 18
          ? getLang("session3")
          : getLang("session4");
      };

      // Ordinal suffix
      const getOrdinalSuffix = (i) => {
        const j = i % 10,
          k = i % 100;
        if (j == 1 && k != 11) return i + "st";
        if (j == 2 && k != 12) return i + "nd";
        if (j == 3 && k != 13) return i + "rd";
        return i + "th";
      };

      // Main sender
      const sendWelcomeMessage = async (user, position) => {
        const userName = user.fullName;
        const userId = user.userFbId;
        const dateTime = moment().tz("Asia/Dhaka").format("MMMM Do YYYY, h:mm:ss a");
        const membersCount = threadInfo.participantIDs.length;
        const adminsCount = threadInfo.adminIDs.length;

        let welcomeMessage = threadData.data.welcomeMessage || getLang("defaultWelcomeMessage");
        welcomeMessage = welcomeMessage
          .replace(/\{userName\}|\{userNameTag\}/g, userName)
          .replace(/\{boxName\}|\{threadName\}/g, threadName)
          .replace(/\{multiple\}/g, getLang("multiple1"))
          .replace(/\{session\}/g, getSessionName())
          .replace(/\{dateTime\}/g, dateTime)
          .replace(/\{membersCount\}/g, membersCount)
          .replace(/\{adminsCount\}/g, adminsCount)
          .replace(/\{position\}/g, getOrdinalSuffix(position));

        const form = { body: welcomeMessage, mentions: [{ tag: userName, id: userId }] };

        try {
          const avt = await usersData.getAvatarUrl(userId);
          const url = `https://api.popcat.xyz/welcomecard?background=${encodeURIComponent(
            background
          )}&text1=${encodeURIComponent(userName)}&text2=Welcome%20To%20${encodeURIComponent(
            threadName
          )}&text3=Member%20${encodeURIComponent(position)}&avatar=${encodeURIComponent(avt)}`;

          const filePath = path.resolve(cacheFolder, `${userId}.jpg`);
          const response = await axios.get(url, { responseType: "stream" });
          const writer = fs.createWriteStream(filePath);
          response.data.pipe(writer);
          writer.on("finish", () => {
            form.attachment = [fs.createReadStream(filePath)];
            message.send(form);
            console.log(
              chalk.greenBright("‚úÖ WELCOME:"),
              chalk.yellow(userName),
              chalk.cyan(`joined ${threadName} as #${position}`)
            );
          });
        } catch (err) {
          console.error(chalk.red("‚ùå Error generating welcome card:"), err.message);
          message.send(form);
        }
      };

      // Loop send
      for (const [index, user] of validParticipants.entries()) {
        await sendWelcomeMessage(
          user,
          threadInfo.participantIDs.length - validParticipants.length + index + 1
        );
      }

      delete global.temp.welcomeEvent[threadID];
    }, 1500);
  }
};
